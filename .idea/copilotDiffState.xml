<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/melbourne-parking-website/.gitignore">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/melbourne-parking-website/.gitignore" />
              <option name="updatedContent" value="# Python&#10;__pycache__/&#10;*.py[cod]&#10;*$py.class&#10;*.so&#10;.Python&#10;build/&#10;develop-eggs/&#10;dist/&#10;downloads/&#10;eggs/&#10;.eggs/&#10;lib/&#10;lib64/&#10;parts/&#10;sdist/&#10;var/&#10;wheels/&#10;*.egg-info/&#10;.installed.cfg&#10;*.egg&#10;&#10;# Node.js&#10;node_modules/&#10;npm-debug.log*&#10;yarn-debug.log*&#10;yarn-error.log*&#10;.pnpm-debug.log*&#10;&#10;# Environment variables&#10;.env&#10;.env.local&#10;.env.development&#10;.env.test&#10;&#10;# IDE&#10;.vscode/&#10;.idea/&#10;*.swp&#10;*.swo&#10;&#10;# OS&#10;.DS_Store&#10;Thumbs.db&#10;&#10;# Logs&#10;logs/&#10;*.log&#10;&#10;# Database&#10;*.db&#10;*.sqlite&#10;&#10;# Frontend build (will be built on Railway)&#10;frontend/dist/&#10;frontend/.vite/&#10;&#10;# Cache&#10;.cache/&#10;.parcel-cache/" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/melbourne-parking-website/Procfile">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/melbourne-parking-website/Procfile" />
              <option name="originalContent" value="web: cd backend &amp;&amp; gunicorn --bind 0.0.0.0:$PORT run:app&#10;&#10;" />
              <option name="updatedContent" value="web: cd backend &amp;&amp; python run.py" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/melbourne-parking-website/backend/run.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/melbourne-parking-website/backend/run.py" />
              <option name="originalContent" value="#!/usr/bin/env python3&#10;&quot;&quot;&quot;&#10;Entry point for Melbourne Parking Website backend server&#10;&quot;&quot;&quot;&#10;&#10;import sys&#10;import os&#10;&#10;# Add backend directory to Python path&#10;sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))&#10;&#10;from website import create_website&#10;&#10;if __name__ == '__main__':&#10;    app = create_website()&#10;    print(&quot;Melbourne Parking Website backend starting on http://localhost:5002&quot;)&#10;    app.run(debug=True, host='0.0.0.0', port=5002)&#10;" />
              <option name="updatedContent" value="#!/usr/bin/env python3&#10;&quot;&quot;&quot;&#10;Entry point for Melbourne Parking Website backend server&#10;&quot;&quot;&quot;&#10;&#10;import sys&#10;import os&#10;&#10;# Add backend directory to Python path&#10;sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))&#10;&#10;from website import create_website&#10;&#10;if __name__ == '__main__':&#10;    app = create_website()&#10;    port = int(os.environ.get('PORT', 5002))&#10;    print(f&quot;Melbourne Parking Website backend starting on port {port}&quot;)&#10;    app.run(debug=False, host='0.0.0.0', port=port)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/melbourne-parking-website/frontend/.env.production">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/melbourne-parking-website/frontend/.env.production" />
              <option name="updatedContent" value="VITE_API_BASE_URL=/api&#10;NODE_ENV=production" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/melbourne-parking-website/frontend/src/services/analyticsService.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/melbourne-parking-website/frontend/src/services/analyticsService.js" />
              <option name="originalContent" value="/**&#10; * Analytics Service for Advanced Analysis Features&#10; * Handles population data and historical trends analysis&#10; */&#10;&#10;import axios from 'axios'&#10;&#10;const BASE_URL = 'http://localhost:5002/api'&#10;&#10;class AnalyticsService {&#10;&#10;  /**&#10;   * Get population growth data for Victoria&#10;   * @returns {Promise&lt;Array&gt;} Population data with growth numbers and rates&#10;   */&#10;  async getPopulationData() {&#10;    try {&#10;      const response = await axios.get(`${BASE_URL}/analytics/population`)&#10;      return response.data&#10;    } catch (error) {&#10;      console.error('Error fetching population data:', error)&#10;      throw error&#10;    }&#10;  }&#10;&#10;  /**&#10;   * Get historical parking usage trends&#10;   * @param {string} period - Time period ('7d', '1m', '3m')&#10;   * @returns {Promise&lt;Array&gt;} Historical data with occupancy rates and available spots&#10;   */&#10;  async getHistoricalData(period = '1m') {&#10;    try {&#10;      const response = await axios.get(`${BASE_URL}/analytics/historical`, {&#10;        params: { period }&#10;      })&#10;      return response.data&#10;    } catch (error) {&#10;      console.error('Error fetching historical data:', error)&#10;      throw error&#10;    }&#10;  }&#10;&#10;  /**&#10;   * Get correlation analysis between population and parking&#10;   * @returns {Promise&lt;Object&gt;} Correlation analysis results&#10;   */&#10;  async getPopulationParkingCorrelation() {&#10;    try {&#10;      const response = await axios.get(`${BASE_URL}/analytics/correlation`)&#10;      return response.data&#10;    } catch (error) {&#10;      console.error('Error fetching correlation data:', error)&#10;      throw error&#10;    }&#10;  }&#10;&#10;  /**&#10;   * Process CSV population data (client-side processing as fallback)&#10;   * @param {string} csvData - Raw CSV data&#10;   * @returns {Array} Processed population data&#10;   */&#10;  processPopulationCSV(csvData) {&#10;    const lines = csvData.split('\n')&#10;    const data = []&#10;&#10;    // Skip header rows and process data&#10;    for (let i = 2; i &lt; lines.length; i++) {&#10;      const line = lines[i].trim()&#10;      if (!line) continue&#10;&#10;      const columns = this.parseCSVLine(line)&#10;      if (columns.length &gt;= 10) {&#10;        const state = columns[0].replace(/&quot;/g, '')&#10;&#10;        // Extract growth numbers (columns 1, 3, 5, 7, 9)&#10;        const growthNumbers = [&#10;          this.parseNumber(columns[1]),&#10;          this.parseNumber(columns[3]),&#10;          this.parseNumber(columns[5]),&#10;          this.parseNumber(columns[7]),&#10;          this.parseNumber(columns[9])&#10;        ].filter(num =&gt; !isNaN(num))&#10;&#10;        // Extract growth rates (columns 2, 4, 6, 8, 10)&#10;        const growthRates = [&#10;          columns[2].replace(/&quot;/g, ''),&#10;          columns[4].replace(/&quot;/g, ''),&#10;          columns[6].replace(/&quot;/g, ''),&#10;          columns[8].replace(/&quot;/g, ''),&#10;          columns[10].replace(/&quot;/g, '')&#10;        ].filter(rate =&gt; rate &amp;&amp; rate !== '')&#10;&#10;        if (growthNumbers.length &gt; 0 &amp;&amp; growthRates.length &gt; 0) {&#10;          data.push({&#10;            state,&#10;            growthNumbers,&#10;            growthRates&#10;          })&#10;        }&#10;      }&#10;    }&#10;&#10;    return data&#10;  }&#10;&#10;  /**&#10;   * Parse CSV line handling quoted values&#10;   * @param {string} line - CSV line&#10;   * @returns {Array} Parsed columns&#10;   */&#10;  parseCSVLine(line) {&#10;    const columns = []&#10;    let current = ''&#10;    let inQuotes = false&#10;&#10;    for (let i = 0; i &lt; line.length; i++) {&#10;      const char = line[i]&#10;&#10;      if (char === '&quot;') {&#10;        inQuotes = !inQuotes&#10;      } else if (char === ',' &amp;&amp; !inQuotes) {&#10;        columns.push(current.trim())&#10;        current = ''&#10;      } else {&#10;        current += char&#10;      }&#10;    }&#10;&#10;    // Add the last column&#10;    columns.push(current.trim())&#10;    return columns&#10;  }&#10;&#10;  /**&#10;   * Parse number from string, handling commas&#10;   * @param {string} str - String to parse&#10;   * @returns {number} Parsed number&#10;   */&#10;  parseNumber(str) {&#10;    if (!str) return NaN&#10;    const cleaned = str.replace(/[&quot;,]/g, '')&#10;    return parseFloat(cleaned)&#10;  }&#10;&#10;  /**&#10;   * Generate mock historical data for development/fallback&#10;   * @param {string} period - Time period&#10;   * @returns {Array} Mock historical data&#10;   */&#10;  generateMockHistoricalData(period) {&#10;    const data = []&#10;    const days = period === '7d' ? 7 : period === '1m' ? 30 : 90&#10;&#10;    for (let i = days - 1; i &gt;= 0; i--) {&#10;      const date = new Date()&#10;      date.setDate(date.getDate() - i)&#10;&#10;      // Generate realistic parking patterns&#10;      const hour = date.getHours()&#10;      let baseOccupancy = 30 // Base occupancy rate&#10;&#10;      // Peak hours pattern&#10;      if (hour &gt;= 8 &amp;&amp; hour &lt;= 10) baseOccupancy = 75 // Morning peak&#10;      else if (hour &gt;= 12 &amp;&amp; hour &lt;= 14) baseOccupancy = 65 // Lunch peak&#10;      else if (hour &gt;= 17 &amp;&amp; hour &lt;= 19) baseOccupancy = 80 // Evening peak&#10;      else if (hour &gt;= 20 || hour &lt;= 6) baseOccupancy = 20 // Night/early morning&#10;&#10;      // Weekend adjustment&#10;      if (date.getDay() === 0 || date.getDay() === 6) {&#10;        baseOccupancy *= 0.7 // Lower weekend usage&#10;      }&#10;&#10;      // Add some randomness&#10;      const occupancyRate = Math.max(10, Math.min(95, baseOccupancy + (Math.random() - 0.5) * 20))&#10;      const totalSpots = 3200&#10;      const occupiedSpots = Math.round(totalSpots * occupancyRate / 100)&#10;      const availableSpots = totalSpots - occupiedSpots&#10;&#10;      data.push({&#10;        period: period === '7d'&#10;          ? date.toLocaleDateString('en-AU', { weekday: 'short', month: 'short', day: 'numeric' })&#10;          : date.toLocaleDateString('en-AU', { month: 'short', day: 'numeric' }),&#10;        occupancyRate: Math.round(occupancyRate * 10) / 10,&#10;        availableSpots,&#10;        occupiedSpots,&#10;        totalSpots,&#10;        timestamp: date.toISOString()&#10;      })&#10;    }&#10;&#10;    return data&#10;  }&#10;&#10;  /**&#10;   * Calculate trend statistics from historical data&#10;   * @param {Array} data - Historical data array&#10;   * @returns {Object} Trend statistics&#10;   */&#10;  calculateTrendStats(data) {&#10;    if (!data || data.length === 0) {&#10;      return {&#10;        averageOccupancy: 0,&#10;        peakOccupancy: 0,&#10;        peakTime: 'N/A',&#10;        trendDirection: 'stable',&#10;        changeRate: 0&#10;      }&#10;    }&#10;&#10;    const occupancyRates = data.map(d =&gt; d.occupancyRate)&#10;    const averageOccupancy = occupancyRates.reduce((sum, rate) =&gt; sum + rate, 0) / occupancyRates.length&#10;&#10;    const peakData = data.reduce((max, current) =&gt;&#10;      current.occupancyRate &gt; max.occupancyRate ? current : max&#10;    )&#10;&#10;    // Calculate trend&#10;    const firstRate = occupancyRates[0]&#10;    const lastRate = occupancyRates[occupancyRates.length - 1]&#10;    const changeRate = ((lastRate - firstRate) / firstRate) * 100&#10;&#10;    let trendDirection = 'stable'&#10;    if (changeRate &gt; 5) trendDirection = 'increasing'&#10;    else if (changeRate &lt; -5) trendDirection = 'decreasing'&#10;&#10;    return {&#10;      averageOccupancy: Math.round(averageOccupancy * 10) / 10,&#10;      peakOccupancy: peakData.occupancyRate,&#10;      peakTime: peakData.period,&#10;      trendDirection,&#10;      changeRate: Math.round(changeRate * 10) / 10&#10;    }&#10;  }&#10;}&#10;&#10;const analyticsService = new AnalyticsService()&#10;export default analyticsService&#10;" />
              <option name="updatedContent" value="/**&#10; * Analytics Service for Advanced Analysis Features&#10; * Handles population data and historical trends analysis&#10; */&#10;&#10;import axios from 'axios'&#10;&#10;// Use relative path for production deployment, fallback to localhost for development&#10;const API_BASE_URL = process.env.NODE_ENV === 'production' ? '/api' : 'http://localhost:5002/api'&#10;&#10;class AnalyticsService {&#10;&#10;  /**&#10;   * Get population growth data for Victoria&#10;   * @returns {Promise&lt;Array&gt;} Population data with growth numbers and rates&#10;   */&#10;  async getPopulationData() {&#10;    try {&#10;      const response = await axios.get(`${API_BASE_URL}/analytics/population`)&#10;      return response.data&#10;    } catch (error) {&#10;      console.error('Error fetching population data:', error)&#10;      throw error&#10;    }&#10;  }&#10;&#10;  /**&#10;   * Get historical parking usage trends&#10;   * @param {string} period - Time period ('7d', '1m', '3m')&#10;   * @returns {Promise&lt;Array&gt;} Historical data with occupancy rates and available spots&#10;   */&#10;  async getHistoricalData(period = '1m') {&#10;    try {&#10;      const response = await axios.get(`${API_BASE_URL}/analytics/historical`, {&#10;        params: { period }&#10;      })&#10;      return response.data&#10;    } catch (error) {&#10;      console.error('Error fetching historical data:', error)&#10;      throw error&#10;    }&#10;  }&#10;&#10;  /**&#10;   * Get correlation analysis between population and parking&#10;   * @returns {Promise&lt;Object&gt;} Correlation analysis results&#10;   */&#10;  async getPopulationParkingCorrelation() {&#10;    try {&#10;      const response = await axios.get(`${API_BASE_URL}/analytics/correlation`)&#10;      return response.data&#10;    } catch (error) {&#10;      console.error('Error fetching correlation data:', error)&#10;      throw error&#10;    }&#10;  }&#10;&#10;  /**&#10;   * Process CSV population data (client-side processing as fallback)&#10;   * @param {string} csvData - Raw CSV data&#10;   * @returns {Array} Processed population data&#10;   */&#10;  processPopulationCSV(csvData) {&#10;    const lines = csvData.split('\n')&#10;    const data = []&#10;&#10;    // Skip header rows and process data&#10;    for (let i = 2; i &lt; lines.length; i++) {&#10;      const line = lines[i].trim()&#10;      if (!line) continue&#10;&#10;      const columns = this.parseCSVLine(line)&#10;      if (columns.length &gt;= 10) {&#10;        const state = columns[0].replace(/&quot;/g, '')&#10;&#10;        // Extract growth numbers (columns 1, 3, 5, 7, 9)&#10;        const growthNumbers = [&#10;          this.parseNumber(columns[1]),&#10;          this.parseNumber(columns[3]),&#10;          this.parseNumber(columns[5]),&#10;          this.parseNumber(columns[7]),&#10;          this.parseNumber(columns[9])&#10;        ].filter(num =&gt; !isNaN(num))&#10;&#10;        // Extract growth rates (columns 2, 4, 6, 8, 10)&#10;        const growthRates = [&#10;          columns[2].replace(/&quot;/g, ''),&#10;          columns[4].replace(/&quot;/g, ''),&#10;          columns[6].replace(/&quot;/g, ''),&#10;          columns[8].replace(/&quot;/g, ''),&#10;          columns[10].replace(/&quot;/g, '')&#10;        ].filter(rate =&gt; rate &amp;&amp; rate !== '')&#10;&#10;        if (growthNumbers.length &gt; 0 &amp;&amp; growthRates.length &gt; 0) {&#10;          data.push({&#10;            state,&#10;            growthNumbers,&#10;            growthRates&#10;          })&#10;        }&#10;      }&#10;    }&#10;&#10;    return data&#10;  }&#10;&#10;  /**&#10;   * Parse CSV line handling quoted values&#10;   * @param {string} line - CSV line&#10;   * @returns {Array} Parsed columns&#10;   */&#10;  parseCSVLine(line) {&#10;    const columns = []&#10;    let current = ''&#10;    let inQuotes = false&#10;&#10;    for (let i = 0; i &lt; line.length; i++) {&#10;      const char = line[i]&#10;&#10;      if (char === '&quot;') {&#10;        inQuotes = !inQuotes&#10;      } else if (char === ',' &amp;&amp; !inQuotes) {&#10;        columns.push(current.trim())&#10;        current = ''&#10;      } else {&#10;        current += char&#10;      }&#10;    }&#10;&#10;    // Add the last column&#10;    columns.push(current.trim())&#10;    return columns&#10;  }&#10;&#10;  /**&#10;   * Parse number from string, handling commas&#10;   * @param {string} str - String to parse&#10;   * @returns {number} Parsed number&#10;   */&#10;  parseNumber(str) {&#10;    if (!str) return NaN&#10;    const cleaned = str.replace(/[&quot;,]/g, '')&#10;    return parseFloat(cleaned)&#10;  }&#10;&#10;  /**&#10;   * Generate mock historical data for development/fallback&#10;   * @param {string} period - Time period&#10;   * @returns {Array} Mock historical data&#10;   */&#10;  generateMockHistoricalData(period) {&#10;    const data = []&#10;    const days = period === '7d' ? 7 : period === '1m' ? 30 : 90&#10;&#10;    for (let i = days - 1; i &gt;= 0; i--) {&#10;      const date = new Date()&#10;      date.setDate(date.getDate() - i)&#10;&#10;      // Generate realistic parking patterns&#10;      const hour = date.getHours()&#10;      let baseOccupancy = 30 // Base occupancy rate&#10;&#10;      // Peak hours pattern&#10;      if (hour &gt;= 8 &amp;&amp; hour &lt;= 10) baseOccupancy = 75 // Morning peak&#10;      else if (hour &gt;= 12 &amp;&amp; hour &lt;= 14) baseOccupancy = 65 // Lunch peak&#10;      else if (hour &gt;= 17 &amp;&amp; hour &lt;= 19) baseOccupancy = 80 // Evening peak&#10;      else if (hour &gt;= 20 || hour &lt;= 6) baseOccupancy = 20 // Night/early morning&#10;&#10;      // Weekend adjustment&#10;      if (date.getDay() === 0 || date.getDay() === 6) {&#10;        baseOccupancy *= 0.7 // Lower weekend usage&#10;      }&#10;&#10;      // Add some randomness&#10;      const occupancyRate = Math.max(10, Math.min(95, baseOccupancy + (Math.random() - 0.5) * 20))&#10;      const totalSpots = 3200&#10;      const occupiedSpots = Math.round(totalSpots * occupancyRate / 100)&#10;      const availableSpots = totalSpots - occupiedSpots&#10;&#10;      data.push({&#10;        period: period === '7d'&#10;          ? date.toLocaleDateString('en-AU', { weekday: 'short', month: 'short', day: 'numeric' })&#10;          : date.toLocaleDateString('en-AU', { month: 'short', day: 'numeric' }),&#10;        occupancyRate: Math.round(occupancyRate * 10) / 10,&#10;        availableSpots,&#10;        occupiedSpots,&#10;        totalSpots,&#10;        timestamp: date.toISOString()&#10;      })&#10;    }&#10;&#10;    return data&#10;  }&#10;&#10;  /**&#10;   * Calculate trend statistics from historical data&#10;   * @param {Array} data - Historical data array&#10;   * @returns {Object} Trend statistics&#10;   */&#10;  calculateTrendStats(data) {&#10;    if (!data || data.length === 0) {&#10;      return {&#10;        averageOccupancy: 0,&#10;        peakOccupancy: 0,&#10;        peakTime: 'N/A',&#10;        trendDirection: 'stable',&#10;        changeRate: 0&#10;      }&#10;    }&#10;&#10;    const occupancyRates = data.map(d =&gt; d.occupancyRate)&#10;    const averageOccupancy = occupancyRates.reduce((sum, rate) =&gt; sum + rate, 0) / occupancyRates.length&#10;&#10;    const peakData = data.reduce((max, current) =&gt;&#10;      current.occupancyRate &gt; max.occupancyRate ? current : max&#10;    )&#10;&#10;    // Calculate trend&#10;    const firstRate = occupancyRates[0]&#10;    const lastRate = occupancyRates[occupancyRates.length - 1]&#10;    const changeRate = ((lastRate - firstRate) / firstRate) * 100&#10;&#10;    let trendDirection = 'stable'&#10;    if (changeRate &gt; 5) trendDirection = 'increasing'&#10;    else if (changeRate &lt; -5) trendDirection = 'decreasing'&#10;&#10;    return {&#10;      averageOccupancy: Math.round(averageOccupancy * 10) / 10,&#10;      peakOccupancy: peakData.occupancyRate,&#10;      peakTime: peakData.period,&#10;      trendDirection,&#10;      changeRate: Math.round(changeRate * 10) / 10&#10;    }&#10;  }&#10;}&#10;&#10;const analyticsService = new AnalyticsService()&#10;export default analyticsService" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/melbourne-parking-website/frontend/src/services/parkingService.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/melbourne-parking-website/frontend/src/services/parkingService.js" />
              <option name="originalContent" value="import axios from 'axios'&#10;&#10;const API_BASE_URL = 'http://localhost:5002/api'&#10;&#10;class ParkingService {&#10;  async getCurrentParkingStatus() {&#10;    const response = await axios.get(`${API_BASE_URL}/parking/current`)&#10;    return response.data&#10;  }&#10;&#10;  async findNearbyParking(lat, lng, radius = 500) {&#10;    const response = await axios.get(`${API_BASE_URL}/parking/nearby`, {&#10;      params: { lat, lng, radius }&#10;    })&#10;    return response.data&#10;  }&#10;&#10;  async getStreetsList() {&#10;    const response = await axios.get(`${API_BASE_URL}/parking/streets`)&#10;    return response.data&#10;  }&#10;&#10;  async getOverviewStats() {&#10;    const response = await axios.get(`${API_BASE_URL}/statistics/overview`)&#10;    return response.data&#10;  }&#10;&#10;  async getZoneStats() {&#10;    const response = await axios.get(`${API_BASE_URL}/statistics/zones`)&#10;    return response.data&#10;  }&#10;}&#10;&#10;export default new ParkingService()&#10;" />
              <option name="updatedContent" value="import axios from 'axios'&#10;&#10;// Use relative path for production deployment, fallback to localhost for development&#10;const API_BASE_URL = process.env.NODE_ENV === 'production' ? '/api' : 'http://localhost:5002/api'&#10;&#10;class ParkingService {&#10;  async getCurrentParkingStatus() {&#10;    const response = await axios.get(`${API_BASE_URL}/parking/current`)&#10;    return response.data&#10;  }&#10;&#10;  async findNearbyParking(lat, lng, radius = 500) {&#10;    const response = await axios.get(`${API_BASE_URL}/parking/nearby`, {&#10;      params: { lat, lng, radius }&#10;    })&#10;    return response.data&#10;  }&#10;&#10;  async getStreetsList() {&#10;    const response = await axios.get(`${API_BASE_URL}/parking/streets`)&#10;    return response.data&#10;  }&#10;&#10;  async getOverviewStats() {&#10;    const response = await axios.get(`${API_BASE_URL}/statistics/overview`)&#10;    return response.data&#10;  }&#10;&#10;  async getZoneStats() {&#10;    const response = await axios.get(`${API_BASE_URL}/statistics/zones`)&#10;    return response.data&#10;  }&#10;}&#10;&#10;export default new ParkingService()" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/melbourne-parking-website/frontend/vite.config.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/melbourne-parking-website/frontend/vite.config.js" />
              <option name="originalContent" value="import { defineConfig } from 'vite'&#10;import vue from '@vitejs/plugin-vue'&#10;&#10;export default defineConfig({&#10;  plugins: [vue()],&#10;  server: {&#10;    port: 3000&#10;  }&#10;})&#10;" />
              <option name="updatedContent" value="import { defineConfig } from 'vite'&#10;import vue from '@vitejs/plugin-vue'&#10;&#10;export default defineConfig({&#10;  plugins: [vue()],&#10;  server: {&#10;    port: 3000&#10;  },&#10;  build: {&#10;    outDir: 'dist',&#10;    assetsDir: 'assets'&#10;  },&#10;  base: './'&#10;})" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/melbourne-parking-website/nixpacks.toml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/melbourne-parking-website/nixpacks.toml" />
              <option name="originalContent" value="[phases.setup]&#10;nixPkgs = ['python39', 'nodejs-18_x']&#10;&#10;[phases.install]&#10;cmds = [&#10;    'cd backend &amp;&amp; pip install -r requirements.txt',&#10;    'cd frontend &amp;&amp; npm install'&#10;]&#10;&#10;[phases.build]&#10;cmds = [&#10;    'cd frontend &amp;&amp; npm run build'&#10;]&#10;&#10;[start]&#10;cmd = 'cd backend &amp;&amp; gunicorn --bind 0.0.0.0:$PORT run:app'&#10;" />
              <option name="updatedContent" value="[phases.setup]&#10;nixPkgs = ['python39', 'nodejs-18_x', 'postgresql_16']&#10;&#10;[phases.install]&#10;cmds = [&#10;    'cd backend &amp;&amp; pip install -r requirements.txt',&#10;    'cd frontend &amp;&amp; npm install'&#10;]&#10;&#10;[phases.build]&#10;cmds = [&#10;    'cd frontend &amp;&amp; npm run build'&#10;]&#10;&#10;[start]&#10;cmd = 'cd backend &amp;&amp; python run.py'" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/melbourne-parking-website/railway.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/melbourne-parking-website/railway.json" />
              <option name="originalContent" value="{&#10;  &quot;$schema&quot;: &quot;https://railway.app/railway.schema.json&quot;,&#10;  &quot;build&quot;: {&#10;    &quot;builder&quot;: &quot;NIXPACKS&quot;&#10;  },&#10;  &quot;deploy&quot;: {&#10;    &quot;startCommand&quot;: &quot;cd backend &amp;&amp; gunicorn --bind 0.0.0.0:$PORT run:app&quot;,&#10;    &quot;restartPolicyType&quot;: &quot;ON_FAILURE&quot;,&#10;    &quot;restartPolicyMaxRetries&quot;: 10&#10;  }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="{&#10;  &quot;$schema&quot;: &quot;https://railway.app/railway.schema.json&quot;,&#10;  &quot;build&quot;: {&#10;    &quot;builder&quot;: &quot;NIXPACKS&quot;,&#10;    &quot;buildCommand&quot;: &quot;cd melbourne-parking-website/frontend &amp;&amp; npm install &amp;&amp; npm run build&quot;&#10;  },&#10;  &quot;deploy&quot;: {&#10;    &quot;startCommand&quot;: &quot;cd melbourne-parking-website/backend &amp;&amp; python run.py&quot;,&#10;    &quot;restartPolicyType&quot;: &quot;ON_FAILURE&quot;,&#10;    &quot;restartPolicyMaxRetries&quot;: 10&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/nixpacks.toml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/nixpacks.toml" />
              <option name="originalContent" value="[phases.setup]&#10;nixPkgs = ['python39', 'nodejs-18_x', 'postgresql_16']&#10;&#10;[phases.install]&#10;cmds = [&#10;    'cd melbourne-parking-website/backend &amp;&amp; pip install -r requirements.txt',&#10;    'cd melbourne-parking-website/frontend &amp;&amp; npm install'&#10;]&#10;&#10;[phases.build]&#10;cmds = [&#10;    'cd melbourne-parking-website/frontend &amp;&amp; npm run build'&#10;]&#10;&#10;[start]&#10;cmd = 'cd melbourne-parking-website/backend &amp;&amp; python run.py'&#10;" />
              <option name="updatedContent" value="[phases.setup]&#10;aptPkgs = ['python3', 'python3-pip', 'nodejs', 'npm']&#10;&#10;[phases.install]&#10;cmds = [&#10;    'cd melbourne-parking-website/backend &amp;&amp; pip3 install -r requirements.txt',&#10;    'cd melbourne-parking-website/frontend &amp;&amp; npm install'&#10;]&#10;&#10;[phases.build]&#10;cmds = [&#10;    'cd melbourne-parking-website/frontend &amp;&amp; npm run build'&#10;]&#10;&#10;[start]&#10;cmd = 'cd melbourne-parking-website/backend &amp;&amp; python3 run.py'" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/railway.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/railway.json" />
              <option name="updatedContent" value="{&#10;  &quot;$schema&quot;: &quot;https://railway.app/railway.schema.json&quot;,&#10;  &quot;build&quot;: {&#10;    &quot;builder&quot;: &quot;NIXPACKS&quot;,&#10;    &quot;buildCommand&quot;: &quot;cd melbourne-parking-website/frontend &amp;&amp; npm install &amp;&amp; npm run build&quot;&#10;  },&#10;  &quot;deploy&quot;: {&#10;    &quot;startCommand&quot;: &quot;cd melbourne-parking-website/backend &amp;&amp; python run.py&quot;,&#10;    &quot;restartPolicyType&quot;: &quot;ON_FAILURE&quot;,&#10;    &quot;restartPolicyMaxRetries&quot;: 10&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>