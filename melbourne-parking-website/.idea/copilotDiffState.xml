<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/DEPLOYMENT.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/DEPLOYMENT.md" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/RENDER_DEPLOYMENT.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/RENDER_DEPLOYMENT.md" />
              <option name="updatedContent" value="# Render 部署指南 - Melbourne Parking Website&#10;&#10;##  部署步骤&#10;&#10;### 1. 准备 GitHub 仓库&#10;```bash&#10;# 初始化 Git 仓库（如果还没有）&#10;git init&#10;git add .&#10;git commit -m &quot;Initial commit for Render deployment&quot;&#10;&#10;# 推送到 GitHub&#10;git remote add origin https://github.com/yourusername/melbourne-parking-website.git&#10;git branch -M main&#10;git push -u origin main&#10;```&#10;&#10;### 2. 在 Render 上部署&#10;&#10;#### 创建 PostgreSQL 数据库&#10;1. 登录 [Render Dashboard](https://dashboard.render.com/)&#10;2. 点击 &quot;New&quot; → &quot;PostgreSQL&quot;&#10;3. 设置：&#10;   - **Name**: `melbourne-parking-db`&#10;   - **Database**: `melbourne_parking`&#10;   - **User**: `melbourne_user`&#10;   - **Region**: 选择最近的区域&#10;   - **Plan**: Free (免费)&#10;4. 点击 &quot;Create Database&quot;&#10;5. 等待数据库创建完成，记下 **Internal Database URL**&#10;&#10;#### 创建 Web Service&#10;1. 在 Render Dashboard 点击 &quot;New&quot; → &quot;Web Service&quot;&#10;2. 连接您的 GitHub 仓库&#10;3. 设置配置：&#10;   - **Name**: `melbourne-parking-api`&#10;   - **Region**: 与数据库相同区域&#10;   - **Branch**: `main`&#10;   - **Root Directory**: 留空&#10;   - **Runtime**: `Python 3`&#10;   - **Build Command**: `chmod +x build.sh &amp;&amp; ./build.sh`&#10;   - **Start Command**: `gunicorn app:app`&#10;&#10;#### 配置环境变量&#10;在 Web Service 的 &quot;Environment&quot; 选项卡中添加：&#10;```&#10;DATABASE_URL=&lt;你的PostgreSQL Internal Database URL&gt;&#10;SECRET_KEY=&lt;自动生成的密钥&gt;&#10;FLASK_ENV=production&#10;PYTHONPATH=/opt/render/project/src:/opt/render/project/src/backend&#10;```&#10;&#10;### 3. 部署前端（可选 - 静态托管）&#10;&#10;#### 方法 1: Render Static Site&#10;1. 点击 &quot;New&quot; → &quot;Static Site&quot;&#10;2. 连接同一个 GitHub 仓库&#10;3. 设置：&#10;   - **Name**: `melbourne-parking-frontend`&#10;   - **Root Directory**: `frontend`&#10;   - **Build Command**: `npm install &amp;&amp; npm run build`&#10;   - **Publish Directory**: `dist`&#10;&#10;#### 方法 2: 通过后端服务前端（推荐）&#10;后端已配置为同时服务前端文件，无需额外配置。&#10;&#10;### 4. 数据库初始化&#10;&#10;部署完成后，需要初始化数据库：&#10;&#10;1. 在 Render Web Service 的 &quot;Shell&quot; 选项卡中运行：&#10;```bash&#10;python -c &quot;&#10;import sys&#10;sys.path.insert(0, 'backend')&#10;from website import create_website&#10;from models.parking import db&#10;&#10;app = create_website()&#10;with app.app_context():&#10;    db.create_all()&#10;    print('数据库表创建成功')&#10;&quot;&#10;```&#10;&#10;2. 如果有初始数据需要导入：&#10;```bash&#10;cd backend/database/seeds&#10;python import_csv_data.py&#10;```&#10;&#10;##  故障排除&#10;&#10;### 常见问题&#10;&#10;1. **模块导入错误**&#10;   - 确保 `PYTHONPATH` 环境变量包含正确路径&#10;   - 检查 `app.py` 中的路径配置&#10;&#10;2. **数据库连接失败**&#10;   - 验证 `DATABASE_URL` 环境变量&#10;   - 确保使用 `postgresql://` 而不是 `postgres://`&#10;&#10;3. **构建失败**&#10;   - 检查 `requirements.txt` 中的依赖版本&#10;   - 确保 `build.sh` 有执行权限&#10;&#10;### 查看日志&#10;- Web Service: Dashboard → 你的服务 → &quot;Logs&quot; 选项卡&#10;- Database: Dashboard → 你的数据库 → &quot;Logs&quot; 选项卡&#10;&#10;##  访问应用&#10;&#10;部署成功后：&#10;- **API 端点**: `https://your-service-name.onrender.com`&#10;- **前端**: `https://your-service-name.onrender.com` (如果通过后端服务)&#10;- **API 文档**: `https://your-service-name.onrender.com/api/`&#10;&#10;##  免费额度说明&#10;&#10;Render 免费计划包括：&#10;- **Web Services**: 750小时/月 (约31天)&#10;- **PostgreSQL**: 1GB 存储空间，90天数据保留&#10;- **带宽**: 100GB/月&#10;- **自动休眠**: 15分钟无活动后休眠（首次请求需要30秒启动）&#10;&#10;##  后续更新&#10;&#10;每次推送到 GitHub main 分支时，Render 会自动重新部署：&#10;&#10;```bash&#10;git add .&#10;git commit -m &quot;更新功能&quot;&#10;git push origin main&#10;```&#10;&#10;##  注意事项&#10;&#10;1. **冷启动**: 免费服务会在无活动时休眠，首次访问可能需要30秒&#10;2. **数据库**: 免费数据库90天后会被删除，建议定期备份&#10;3. **SSL**: Render 自动提供 HTTPS 证书&#10;4. **自定义域名**: 免费计划不支持自定义域名&#10;&#10;完成这些步骤后，您的 Melbourne Parking Website 就会在 Render 上运行了！" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app.py" />
              <option name="updatedContent" value="#!/usr/bin/env python3&#10;&quot;&quot;&quot;&#10;WSGI entry point for Render deployment&#10;&quot;&quot;&quot;&#10;&#10;import os&#10;import sys&#10;&#10;# Add project directories to Python path&#10;current_dir = os.path.dirname(os.path.abspath(__file__))&#10;backend_dir = os.path.join(current_dir, 'backend')&#10;sys.path.insert(0, current_dir)&#10;sys.path.insert(0, backend_dir)&#10;&#10;from backend.website import create_website&#10;&#10;# Create the Flask application&#10;app = create_website()&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    port = int(os.environ.get(&quot;PORT&quot;, 10000))&#10;    app.run(host=&quot;0.0.0.0&quot;, port=port)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/website.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/website.py" />
              <option name="originalContent" value="from flask import Flask&#10;from flask_cors import CORS&#10;from models.parking import db&#10;&#10;def create_website():&#10;    website = Flask(__name__)&#10;&#10;    # Database configuration&#10;    website.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://melbourne_parking:zjy0312!@localhost:5432/melbourne_parking_system'&#10;    website.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False&#10;&#10;    # Initialize extensions&#10;    db.init_app(website)&#10;    CORS(website)&#10;&#10;    # Register blueprints&#10;    from api.parking_routes import parking_routes&#10;    from api.statistics_routes import statistics_routes&#10;    from api.analytics_routes import analytics_routes&#10;&#10;    website.register_blueprint(parking_routes, url_prefix='/api/parking')&#10;    website.register_blueprint(statistics_routes, url_prefix='/api/statistics')&#10;    website.register_blueprint(analytics_routes, url_prefix='/api/analytics')&#10;&#10;    return website&#10;&#10;if __name__ == '__main__':&#10;    app = create_website()&#10;    print(&quot;Melbourne Parking Website backend starting on http://localhost:5002&quot;)&#10;    app.run(debug=True, port=5002)&#10;" />
              <option name="updatedContent" value="from flask import Flask&#10;from flask_cors import CORS&#10;from models.parking import db&#10;import os&#10;&#10;def create_website():&#10;    website = Flask(__name__)&#10;&#10;    # Database configuration - 支持环境变量&#10;    database_url = os.environ.get('DATABASE_URL', 'postgresql://melbourne_parking:zjy0312!@localhost:5432/melbourne_parking_system')&#10;    &#10;    # Render PostgreSQL URL 格式转换 (postgres:// -&gt; postgresql://)&#10;    if database_url.startswith(&quot;postgres://&quot;):&#10;        database_url = database_url.replace(&quot;postgres://&quot;, &quot;postgresql://&quot;, 1)&#10;    &#10;    website.config['SQLALCHEMY_DATABASE_URI'] = database_url&#10;    website.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False&#10;    website.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'dev-secret-key')&#10;&#10;    # Initialize extensions&#10;    db.init_app(website)&#10;    CORS(website)&#10;&#10;    # Register blueprints&#10;    from api.parking_routes import parking_routes&#10;    from api.statistics_routes import statistics_routes&#10;    from api.analytics_routes import analytics_routes&#10;&#10;    website.register_blueprint(parking_routes, url_prefix='/api/parking')&#10;    website.register_blueprint(statistics_routes, url_prefix='/api/statistics')&#10;    website.register_blueprint(analytics_routes, url_prefix='/api/analytics')&#10;&#10;    return website&#10;&#10;if __name__ == '__main__':&#10;    app = create_website()&#10;    print(&quot;Melbourne Parking Website backend starting on http://localhost:5002&quot;)&#10;    app.run(debug=True, port=5002)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/build.sh">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/build.sh" />
              <option name="updatedContent" value="#!/bin/bash&#10;&#10;# Render 部署构建脚本&#10;echo &quot;开始 Render 部署构建...&quot;&#10;&#10;# 安装 Python 依赖&#10;pip install -r requirements.txt&#10;&#10;# 初始化数据库（如果需要）&#10;if [ &quot;$DATABASE_URL&quot; ]; then&#10;    echo &quot;正在初始化数据库...&quot;&#10;    python -c &quot;&#10;import os&#10;import sys&#10;sys.path.insert(0, 'backend')&#10;from website import create_website&#10;from models.parking import db&#10;&#10;app = create_website()&#10;with app.app_context():&#10;    try:&#10;        db.create_all()&#10;        print('数据库表创建成功')&#10;    except Exception as e:&#10;        print(f'数据库初始化错误: {e}')&#10;&quot;&#10;fi&#10;&#10;echo &quot;构建完成！&quot;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/config.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/config.py" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/deploy.sh">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/deploy.sh" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gunicorn.conf.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gunicorn.conf.py" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/melbourne-parking.service">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/melbourne-parking.service" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/nginx.conf">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/nginx.conf" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/railway.toml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/railway.toml" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/render.yaml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/render.yaml" />
              <option name="updatedContent" value="services:&#10;  # Backend API 服务&#10;  - type: web&#10;    name: melbourne-parking-api&#10;    env: python&#10;    buildCommand: &quot;pip install -r requirements.txt&quot;&#10;    startCommand: &quot;gunicorn app:app&quot;&#10;    envVars:&#10;      - key: PYTHON_VERSION&#10;        value: 3.11.0&#10;      - key: SECRET_KEY&#10;        generateValue: true&#10;      - key: FLASK_ENV&#10;        value: production&#10;&#10;  # PostgreSQL 数据库&#10;  - type: pserv&#10;    name: melbourne-parking-db&#10;    env: postgresql&#10;    plan: free&#10;    &#10;databases:&#10;  - name: melbourne_parking&#10;    databaseName: melbourne_parking&#10;    user: melbourne_user" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/requirements.txt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/requirements.txt" />
              <option name="updatedContent" value="Flask==2.3.3&#10;Flask-CORS==4.0.0&#10;Flask-SQLAlchemy==3.0.5&#10;psycopg2-binary==2.9.7&#10;gunicorn==21.2.0&#10;python-dotenv==1.0.0&#10;requests==2.31.0&#10;pandas==2.1.0&#10;numpy==1.24.3&#10;SQLAlchemy==2.0.19" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/wsgi.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/wsgi.py" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>